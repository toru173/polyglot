:; cat > /dev/null << END_WIN
@ECHO OFF
:: This is the Windows part of the script
::
:: If this script is being run using curl it will need to save
:: itself to a temporary file. We do that here, and delete the
:: temporary file to clean up once we're finished.
:: We need to set a temporary install file path before
:: the pipe-check because expansion behaves differently
:: when executing from a pipe. Thanks cmd.exe!
SET "TEMP_INSTALL_SCRIPT=%TEMP%\%RANDOM%-%RANDOM%.cmd"
TIMEOUT /T 0 >NUL 2>NUL
IF ERRORLEVEL 1 (curl -sL https://raw.githubusercontent.com/toru173/polyglot/refs/heads/main/example -o %TEMP_INSTALL_SCRIPT% && START /B /I CMD /D /Q /K %TEMP_INSTALL_SCRIPT% && EXIT /B)

ECHO I'm being executed by cmd.exe!
GOTO cleanup

:: All done! Let's exit from the Windows part of the script
:cleanup
:: Check if the script was  downloaded to temp. It most likely
:: was as if we piped it from cURL, and if so it won't be
:: named 'example' - it will be named something random.
IF NOT "%~nx0" == "example" (
    DEL "%~f0"
)
EXIT /B
END_WIN

# Now we're in the bash (or similar) part of the script.
# Line endings should be different here too - ensure line
# endings are correct by running adjust_line_endings.py
# before running or uploading this script.
# 
# This needs to be done because batch file labels may not work reliably when using LF only
# (https://www.dostips.com/forum/viewtopic.php?t=8988) and bash doesn't like CRLF
# (https://unix.stackexchange.com/questions/577663/handling-bash-script-with-crlf-carriage-return-in-linux-as-in-msys2).
# The python script inserts the correct line endings for each section.
# It's critical that Git doesn't try to normallise the line endings of any polyglot script,
# so the script name needs to be added to .gitattributes to disable line ending normalisation:
#
# example -text

echo "I'm being executed by bash!"
exit 0